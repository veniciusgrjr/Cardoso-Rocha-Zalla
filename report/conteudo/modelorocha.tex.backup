%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Exibir código fonte
%\begin{lstlisting}
%\end{lstlisting}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Lista com pontos
% \begin{itemize}
%   \item item1
%   \item item2
% \end{itemize}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Lista com números
%  \begin{enumerate}
%   \item item1
%   \item item2
% \end{enumerate}
 

\section{Modelo baseado no livro Caixa de Ferramentas DevOps}

\subsection{Ferramentas básicas: SSH, Git}

\subsubsection{SSH}

É o protocolo utilizado para conectar-se de forma 
segura em servidores. Por meio de criptografia ele 
cria um canal seguro entre duas máquinas. Também 
pode ser utilizado para executar comandos 
remotamente sem entrar no shell da máquina.
O Ansible, ferramenta que será usada mais afrente, 
só precisa de acesso por SSH.

Na maioria dos provedores, será encontrada uma 
opção para adicionar uma chave SSH pública.
Para criar uma chave RSA local segue-se os 
seguintes passos:
 \begin{enumerate}
   \item Digite o comando a seguir:
	
      \begin{lstlisting}
	  ssh-keygen -t rsa
      \end{lstlisting}
   
   \item Quando for perguntado sobre uma frase digite 
      enter duas vezes.
    \item Serão criados dois arquivos:
    \begin{lstlisting}
	  id_rsa_devops e id_rsa_devops.pub
    \end{lstlisting}
    
    \item Os arquivos com extenção .pub são os únicos 
	  que devem ser copiados para outras máquinas 
	  e representam as chaves públicas.

 \end{enumerate} 

\subsubsection{Git}

O Git é um sistema de controle de versão gratuita. 
Em termos práticos, sua função é controlar mudanças 
em repositórios de dados. Essa ferramenta controla 
repositórios de dados, pois, além de código-fonte de 
programas, também é possível controlar repositórios 
para a constução de livros, e qualquer outra 
atividade que em que várias pessoas trabalham ao 
paralelamente na sua construção.

Para instalar essa ferramenta, serão seguidos os 
seguintes passos:
  \begin{enumerate}
   \item Para linux baseado em debian:
      \begin{lstlisting}
	  sudo	apt-get	install	git-core
      \end{lstlisting}
      
   \item Para linux CentOS/RH
      \begin{lstlisting}
	  sudo	yum	install	git
      \end{lstlisting}
   
   \item Para MacOSX com homebrew
      \begin{lstlisting}
	  brew	install	git
      \end{lstlisting}
      
 \end{enumerate}
Após instalar o Git, execute os seguintes comandos 
para configurar um nome de usuário e um email: 

      \begin{lstlisting}
	  git config --global user.name "Seu nome"
	  git config --global user.email "seu@email.com.br"
      \end{lstlisting}

Nesse momento o ambiente está com o Git instalado 
e com nome e e-mail configurados. Será adotado 
agora um sistema para controlar os repositórios 
usados para construir o modelo de DevOps proposto.

O “Github” é um site que fornece um serviço de 
controle de repositórios remotos de “Git” sem custo,
caso o projeto seja aberto, e com custo caso o projeto 
seja privados. Para começar a utilizalo de forma 
gratuita, deve-se acessar o site “github.com” e criar 
uma conta. Neste ponto, será necessária a chave “ssh”, 
que está em:
      \begin{lstlisting}
	  ~/.ssh/id_rsa.pub.
      \end{lstlisting}

Agora, será criado um novo repositório que posteriormente 
será sincronizado com o repositório local que estará em 
cada máquina que estiver trabalhando no projeto. Para criar 
esse repositório, basta seguir os paços do site clicando 
no botão de novo repositório. Para esse projeto, será dado 
o nome de projeto-simples. Agora, será criado um diretório 
local e, posteriormente, será feita a associação desse 
diretório local com o repositório remoto criado 
anteriormente no GitHub. Para isso, deve-se seguir os 
passos listados abaixo:

\begin{enumerate}
   \item Para criar o diretório local digite na linha de comando:
      \begin{lstlisting}
	  mkdir	projeto-simples
      \end{lstlisting}
      
   \item Entre nesse diretório com:
      \begin{lstlisting}
	  cd projeto-simples
      \end{lstlisting}
   
   \item Com um editor de textos favorito, será criado um arquivo 
   de exemplo, com nome de README.md, para poder ser sincronizado 
   com o repositório remoto criado, explicando a função do projeto. 
   Será colocado o seguinte texto no arquivo:
   
      \begin{lstlisting}
	   # README do meu projeto-simples
      \end{lstlisting}
   
   \item Esse projeto será apenas um shell script que conta 
   itens únicos no diretório \/etc. Assim, será criaco o 
   seguinte script com o nome de itens\_unicos.sh:
   
      \begin{lstlisting}
	   #!/bin/sh
	   Echo "Itens unicos"
	   Ls /etc | cut -d" -f 1 | sort | uniq | wc -l
      \end{lstlisting}
      
 \end{enumerate}

Nesse momento, já foi criado o projeto simples que será 
sincronizado com o repositório remoto no github. Agora 
seguiremos os passos a seguir para realizar essa sincronização:

\begin{enumerate}
   \item Para iniciar o repositório Git no diretório local:
      \begin{lstlisting}
	  git init
      \end{lstlisting}
      
   \item Para adicionar todos os arquivos modificados ao 
   conjunto de modificações que serão enviadas para serem 
   sincronizadas com o repositório remoto: 
      \begin{lstlisting}
	  git add . 
      \end{lstlisting}
   
   \item Para criar uma mensagem, descrevendo as modificações: 
      \begin{lstlisting}
	  git commit -m "mensagem descrevendo a alteração"
      \end{lstlisting}
      
   \item Para vincular o repositório local ao repositório remoto: 
      \begin{lstlisting}
	  git remote add origin git@github.com:veniciusgrjr/projeto-simples.git
      \end{lstlisting}
      
    \item Para enviar as alterações: 
      \begin{lstlisting}
	  git push -u origin master
      \end{lstlisting}
	
 \end{enumerate}

Após isso, se a página do repositório remoto for atualizada, os 
arquivos locais estarão lá. Será feito agora um pequeno resumo 
dos comandos do Git:

\begin{itemize}

    \item Esse comando Inicia um repositório Git no 
    diretório atual.
	\begin{lstlisting}
	     Git init
	\end{lstlisting}
    \item Adiciona um ou mais arquivos para serem 
    enviados (commit) ao repositório.
	\begin{lstlisting}
	      Git add.
	\end{lstlisting}
    \item Confirma as mudanças e 
    cria um commit com uma mensaApós isso, faça reload da 
    página do repositório, e os arquivos locais estarão lá.
	\begin{lstlisting}
	      Git commit -m "mensagem"
	\end{lstlisting}    
    \item Esse comando adiciona um “remote” 
    ao repositório atual, chamado origin. Você poderia trabalhar 
    sem ter um remote, não é mandatório.
	\begin{lstlisting}
	      Git remote ...
	\end{lstlisting}
    \item Envia (push) as modificações 
    para o repositório remoto. O parametro -u só é necessário na 
    primeira execução.
	\begin{lstlisting}
	      Git push -u origin master
	\end{lstlisting}
    \item Cria uma cópia o repositório dado pela URL 
    para a máquina local em que foi digitado.
	\begin{lstlisting}
	      Git clone
	\end{lstlisting}
    \item Mostra o estado atual do repositório e 
    das mudanças.
	\begin{lstlisting}
	      Git status
	\end{lstlisting}
\end{itemize}



\subsection{Vagrant e Virtualbox}
\subsection{Ansible}
\subsection{Instalando Wordpress em uma máquina}

